# vim:fileencoding=utf-8:ft=conf:foldmethod=marker
#######################################################
#      __ __ _ __  __           _____       _      __ #
#     / //_/(_) /_/ /___  __   / ___/____ _(_)__  / / #
#    / ,<  / / __/ __/ / / /   \__ \/ __ `/ / _ \/ /  #
#   / /| |/ / /_/ /_/ /_/ /   ___/ / /_/ / /  __/ /   #
#  /_/ |_/_/\__/\__/\__, /   /____/\__,_/_/\___/_/    #
#                  /____/                             #
#######################################################
#: Fonts {{{

font_family      FiraCode-Retina
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size 11.0

# }}}

#: Cursor customization {{{

cursor #cccccc
cursor_text_color #111111
cursor_stop_blinking_after -1

# }}}

#: Scrollback {{{

scrollback_lines 1000
scrollback_pager_history_size 10

wheel_scroll_multiplier 5.0
touch_scroll_multiplier 1.0

# }}}

#: Mouse {{{

mouse_hide_wait 3.0
open_url_modifiers ctrl
strip_trailing_spaces smart
rectangle_select_modifiers ctrl+alt
pointer_shape_when_grabbed hand

# }}}

#: Performance tuning {{{

repaint_delay 8
input_delay 1
sync_to_monitor no

# }}}

#: Terminal bell {{{

enable_audio_bell no

#: }}}

#: Window layout {{{

remember_window_size no
initial_window_width  88c
initial_window_height 26c

# Fat        -- One (or optionally more) windows are shown full width on the top,
#                 the rest of the windows are shown side-by-side on the bottom
# Grid       -- All windows are shown in a grid
# Horizontal -- All windows are shown side-by-side
# Splits     -- Windows arranged in arbitrary patterns created using horizontal
#                 and vertical splits
# Stack      -- Only a single maximized window is shown at a time
# Tall       -- One (or optionally more) windows are shown full height on the left,
#                 the rest of the windows are shown one below the other on the right
# Vertical   -- All windows are shown one below the other
enabled_layouts Splits

window_resize_step_cells 3
window_resize_step_lines 3

window_border_width 1.0
draw_minimal_borders yes

window_margin_width 0
single_window_margin_width -1
window_padding_width 10

active_border_color #98c379
inactive_border_color #cccccc
bell_border_color #ff5a00
inactive_text_alpha 0.75

# static
# scale
# blank
# size
resize_draw_strategy size
resize_in_steps yes

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts)

# tab_bar_style fade

#: The tab bar style, can be one of: fade, separator, powerline, or
#: hidden. In the fade style, each tab's edges fade into the
#: background color, in the separator style, tabs are separated by a
#: configurable separator, and the powerline shows the tabs as a
#: continuous line.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown

# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " â”‡"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_title_template "{title}"

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N. In addition you can use {layout_name} for the current
#: layout name and {num_windows} for the number of windows in the tab.
#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.

# active_tab_title_template none

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

#: }}}

#: Color scheme {{{

foreground #abb2bf
background #282c34
selection_background #cccccc

#: black
color0 #3f4451
color8 #4f5666

#: red
color1 #e06c75
color9 #ff7b86

#: green
color2  #98c379
color10 #b1e18b

#: yellow
color3  #d19a66
color11 #efb074

#: blue
color4  #61afef
color12 #67cdff

#: magenta
color5  #c678dd
color13 #e48bff

#: cyan
color6  #56b6c2
color14 #63d4e0

#: white
color7  #e6e6e6
color15 #ffffff

mark1_foreground black
mark1_background #98d3cb

mark2_foreground black
mark2_background #f2dcd3

mark3_foreground black
mark3_background #f274bc

#: }}}

#: Advanced {{{

# shell .
# editor .

#: environment vars

#: Examples:
#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

term xterm-kitty

#: }}}

#: OS specific tweaks {{{

# linux_display_server auto

#: }}}

#: Keyboard shortcuts {{{

kitty_mod ctrl+shift

clear_all_shortcuts no

#: Clipboard {{{

map kitty_mod+c copy_to_clipboard

map kitty_mod+v  paste_from_clipboard
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

#: }}}

#: Scrolling {{{

map shift+up        scroll_line_up
map shift+k         scroll_line_up
map shift+down      scroll_line_down
map shift+j         scroll_line_down

map shift+page_up   scroll_page_up
map shift+page_down scroll_page_down
map shift+home      scroll_home
map shift+end       scroll_end

map kitty_mod+s     show_scrollback

#: }}}

#: Window management {{{

map kitty_mod+enter new_window
map kitty_mod+w close_window

# splits
map kitty_mod+e launch --location=vsplit
map kitty_mod+d launch --location=hsplit

# window navigation
map kitty_mod+h neighboring_window left
map kitty_mod+j neighboring_window down
map kitty_mod+k neighboring_window up
map kitty_mod+l neighboring_window right

map kitty_mod+left  neighboring_window left
map kitty_mod+down  neighboring_window down
map kitty_mod+up    neighboring_window up
map kitty_mod+right neighboring_window right

map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window

# window moving
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
map kitty_mod+` move_window_to_top

map alt+left  move_window left
map alt+down  move_window down
map alt+up    move_window up
map alt+right move_window right


map kitty_mod+r start_resizing_window

#: }}}

#: Tab management {{{

# map kitty_mod+right next_tab
# map kitty_mod+left  previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management (disabled) {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes (disabled) {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map kitty_mod+equal
map kitty_mod+minus
map kitty_mod+backspace
# map kitty_mod+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

# Open a currently visible URL using the keyboard. The program used
# to open the URL is specified in open_url_with.
map kitty_mod+u kitten hints

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.
map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f kitten hints --type path

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1
map kitty_mod+p>l kitten hints --type line --program -

#: Select words and insert into terminal.
map kitty_mod+p>w kitten hints --type word --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits
map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.
map kitty_mod+p>n kitten hints --type linenum

#: }}}

#: Miscellaneous {{{

map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized
map kitty_mod+p>t    kitten unicode_input
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window

map kitty_mod+a>m    set_background_opacity +0.1
map kitty_mod+a>l    set_background_opacity -0.1
map kitty_mod+a>1    set_background_opacity 1
map kitty_mod+a>d    set_background_opacity default
map kitty_mod+delete combine : clear_terminal reset active : send_text normal clear\x0d

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}
